#ifndef AUTHRORIZATIONVIEW_H
#define AUTHRORIZATIONVIEW_H

#include <QWidget>
#include <Model/Model.h>
#include <Enum/View/ViewType.h>
#include <Enum/View/ViewContext/ViewContextType.h>
#include <View/ViewContext/ViewContextContainer.h>


/*
 * Базовый класс для всех имеющихся контекстных отображений.
 * Контекстное отображение это такое отображение, которое входит в расположение (внутрь)
 * какого-то конкретного окна.
 * Попросту говоря, было решено отделить виджеты от окон.
 * Каждое окно владеет (отображает) какими-то виджетами, вот эти виджеты и являются контекстом данного окна.
 * Соотв. в этот контекст и входят все виджеты этого окна :)
 *
*/


class ViewContextContainer;

class ViewContext {

protected:

    //каждое контекстное отображение имеет доступ к моедли, дабы упростить реализацию взаимодействия с ней.
    Model *m_p_Model;
    //Тип конкретного виджета.
    //Если возникнет необходимость обратиться к виджету по типу указателя на ViewContext,
    //мы этому полю определим, какое контекстное отображение скрывается за ним.
    ViewContextType m_ViewContextType;

public:

    ViewContext( ViewContextType viewContextType );
    //Метод заставляющий каждое контекстное отображение возвращать себя как ВИДЖЕТ,
    //для дальнейшего отображения его на форме
    virtual QWidget *getViewWidget() = 0;
    //установка конкретной модели для отображения
    virtual void setModelForView( Model *pModel );
    //метод инициализации всех соединений. обычно это соединения с моделью.
    //все инициализация соединений вынесена в отдельный метод, дабы упростить
    //проделывание данной операции посредством вызовом одного метода
    virtual void createConnections();
    ViewContextType getViewContextType();

    //Это конечно отдельная история...
    //Быть может со временем я как-то поменяю концепцию выполнение описанной ниже задачи,
    //Но пока что это будет работать именно так....
    //Каждое из отображений испукает сигнал, как только ей есть что отобразить.
    //Ну к примеру, пользователь кликнул мышкой по дисциплине.
    //Модель выдала по ней данные и отображение с описанием этой дисциплины готово отобразиться на экране.
    //Главное окно как-то должно об этом узнать.
    //Посему, было решено, что контейнер виджетов, как представитель всех виджетов данной формы,
    //Будет извещать главное окно об отображении того или иного представления.
    //Соотв. каждое контексное отображение соединяется с контейнером посредством слота и сигнала,
    // где сам сигнал (со стороны контекстного отображения) передает тип отображения,
    // готового к выводу, а контейнер в своем слоте (слот, который и соединен с этим сигналом)
    //сообщает главному окну о том, что необходимо вывести это отображение.
    virtual void connectWithViewContextContainer( ViewContextContainer *viewContextContainer );
};


#endif

